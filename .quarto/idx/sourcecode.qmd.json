{"title":"Group 9","markdown":{"yaml":{"editor":"visual","format":"html"},"headingText":"Group 9","containsRefs":false,"markdown":"\n\n\n### Redesign Visualization : Map and Bar Graph\n\n<br>\n\nImport required libraries for the redesign. Shiny and Shinydashboard is used for the UI of the visualization, plotly for the interactive graph and tidyverse for the visualization and manipulation purposes.\n\n```{r message=FALSE}\nlibrary(tidyverse)\nlibrary(plotly)\nlibrary(shiny)\nlibrary(shinydashboard)\n```\n\n<br>\n\nThe dataset is read and stored in \"poverty\". Before the visualization the data is cleaned, removed the \", \" and replaced the population percentage column data with \".\" (period) and changed the data type to numeric to represent it as a floating point. Mapdata set and the poverty data is joined to plot a world map.\n\n```{r message=FALSE, results='hide'}\npoverty = read.csv(\"Poverty.csv\")\n\npoverty$X..of.population <- gsub(\",\", \".\", poverty$X..of.population)\n\nmapdata <- map_data(\"world\") %>% as_tibble()\n\npoverty <- poverty %>% rename(region = Country)\n\nmapdata <- left_join(mapdata, poverty, by=\"region\")\n\nmapdata <-mapdata %>% filter(!is.na(mapdata$Population))\n\nstr(mapdata)\n\nmapdata$X..of.population <- as.numeric(as.character(mapdata$X..of.population))\n\n```\n\n<br>\n\nPlot the data on the world map and use plotly for making it interactive\n\n```{r message=FALSE}\nmap1 <- ggplot(mapdata, aes(x = long, y = lat, group = group, text = paste(region, \": \", Total.number.of.people.living.in.extreme.poverty, \"M\"))) +\n  geom_polygon(aes(fill = X..of.population), color = \"black\") +\n  scale_fill_gradient(low = \"orange\", high = \"red\", name = \"Poverty %\") +\n  labs(title = \"Poverty Percentage by Region\") +\n  theme_minimal()\n\nmap1_plotly <- ggplotly(map1, tooltip = \"text\")\n\n```\n\n<br>\n\nUsing shiny UI is developed and connected using the server to display the map according the logic specified. If the graph type is a map then there will be a drop down displayed with the regions and single value selection type input. On the other hand if the graph type is a Bar then the input will a drop down with region names and multiple value input box. For both the graphs the data set is cleaned and filtered according to the input selection and passed to the ggplot for render the graph accordingly.\n\n```{r message=FALSE, results='hide'}\nui <- dashboardPage(\n  dashboardHeader(title = \"Poverty Data by Region\", titleWidth = 300),\n  dashboardSidebar(\n    width = 300,\n    conditionalPanel(\n      condition = \"input.graphType === 'Map'\",\n      selectInput(\"regionDropdown\", \"Select Region:\", choices = c(\"World\", unique(mapdata$region)))\n    ),\n    selectInput(\"graphType\", \"Select Graph Type:\", choices = c(\"Map\", \"Bar\")),\n    conditionalPanel(\n      condition = \"input.graphType === 'Bar'\",\n      selectizeInput(\"selectedValues\", \"Select Country(s):\", choices = unique(mapdata$region), multiple = TRUE, selected = unique(mapdata$region)[1])\n    ),\n    actionButton(\"updateButton\", \"Update View\"),\n    tags$head(tags$style(HTML('\n      .skin-blue .main-sidebar { background-color: #1f4d6e; }\n      .skin-blue .main-header .navbar { background-color: #1f4d6e; }\n      .skin-blue .main-header .logo { background-color: #1f4d6e; }\n    ')))\n  ),\n  dashboardBody(\n    fluidRow(\n      box(plotlyOutput(\"plotOutput\"), width = 12)\n    )\n  )\n)\n\nserver <- function(input, output) {\n  selected_country <- reactive({\n    if (length(input$selectedValues) == 0) {\n      unique(mapdata$region)[1]\n    } else {\n      input$selectedValues\n    }\n  })\n  output$plotOutput <- renderPlotly({\n    if (input$regionDropdown == \"World\") {\n      filteredData <- mapdata\n    } else {\n      filteredData <- mapdata[mapdata$region == input$regionDropdown, ]\n    }\n    \n    if (input$graphType == \"Map\") {\n      Map <- ggplot(filteredData, aes(x = long, y = lat, group = group, text = paste(region, \": \", Total.number.of.people.living.in.extreme.poverty))) +\n        geom_polygon(aes(fill = X..of.population), color = \"black\") +\n        scale_fill_gradient(low = \"light green\", high = \"red\", name = \"Poverty %\") +\n        labs(title = paste(\"Poverty Percentage in\", input$regionDropdown)) +\n        theme_minimal() +\n        theme(plot.title = element_text(size = 18, face = \"bold\", hjust = 0.5)) +\n        coord_fixed(1.3)\n      \n      ggplotly(Map, tooltip = \"text\")\n    } else if (input$graphType == \"Bar\") {\n     \n      povertybar <- poverty[poverty$region %in% input$selectedValues, ]\n      povertybar$Total.number.of.people.living.in.extreme.poverty <- gsub(\",\", \"\", povertybar$Total.number.of.people.living.in.extreme.poverty)\n      povertybar$Total.number.of.people.living.in.extreme.poverty <- as.numeric(povertybar$Total.number.of.people.living.in.extreme.poverty)\n  \n      Bargraph <- ggplot(povertybar, aes(x = region, y = Total.number.of.people.living.in.extreme.poverty, fill = region, text = paste(\"Population:\", Total.number.of.people.living.in.extreme.poverty, \"M\"))) +\n        geom_bar(stat = \"identity\") +\n        scale_fill_discrete(name = \"Region\") + \n        labs(title = \"Poverty Comparison among Regions\",\n             y = \"Population (M)\", x = \"Country\") +\n        theme_minimal() +\n        theme(plot.title = element_text(size = 18, face = \"bold\", hjust = 0.5))+\n        scale_y_continuous(labels = scales::comma)\n      \n      ggplotly(Bargraph, tooltip = \"text\")\n    }\n  })\n}\nshinyApp(ui, server)\n```\n\n<br>\n\n### Redesign Visualization : Line Graph\n\n<br>\n\nImport the appropriate libraries\n\n```{r message=FALSE}\nlibrary(shiny)\nlibrary(plotly)\n```\n\n<br>\n\nClean the data set by removing the parenthesis from the country column and rename the column for easier usage of attribute names (optional).\n\n```{r message=FALSE}\npoverty = read.csv(\"Poverty.csv\")\n\npoverty_year = read.csv(\"C:/Users/darsh/Desktop/STAT 515/Mid Project/Population in poverty.csv\")\n\npoverty_year$Entity <- gsub(\"\\\\(.*?\\\\)\", \"\", poverty_year$Entity)\n\npoverty_year <- poverty_year %>% rename(Country = Entity)\n\npoverty_year <- poverty_year %>% rename(Poverty.Percentage = X.2.15.a.day...Share.of.population.in.poverty)\n\n```\n\n<br>\n\nUsing Shiny, UI is developed and server renders the output according to the input value and entire UI is rendered. Line chart is displayed showing the details of the poverty percentage over the period of time.\n\n```{r results='hide'}\nui <- fluidPage(\n  titlePanel(\"Country Poverty Percentage Over Years\"),\n  selectizeInput(\"countryInput\", \"Select Country(s):\",\n                 choices = unique(poverty_year$Country),\n                 multiple = TRUE, selected = unique(poverty_year$Country)[1]),\n  plotlyOutput(\"povertyPlot\")\n)\n\nserver <- function(input, output) {\n  selected_country <- reactive({\n    if (length(input$countryInput) == 0) {\n      unique(poverty_year$Country)[1]\n    } else {\n      input$countryInput\n    }\n  })\n  \n  output$povertyPlot <- renderPlotly({\n    filtered_data <- poverty_year[poverty_year$Country %in% selected_country(), ]\n    \n    p <- ggplot(filtered_data, aes(x = Year, y = Poverty.Percentage, color = Country)) +\n      geom_line() +\n      geom_point(aes(text = paste(\"Year:\", Year, \"<br>Population in Poverty (%):\", Poverty.Percentage))) +\n      theme_minimal() +\n      labs(title = paste(\"Poverty Percentage Over Years\"),\n           y = \"Poverty Percentage\", x = \"Year\")\n    \n    ggplotly(p, tooltip = \"text\")\n  })\n}\nshinyApp(ui, server)\n```\n\nNote : Since Shiny is not supported in this static page the output is not displayed hence check the video link on the projects page for the full interactive UI demo\n","srcMarkdownNoYaml":"\n\n### Group 9\n\n### Redesign Visualization : Map and Bar Graph\n\n<br>\n\nImport required libraries for the redesign. Shiny and Shinydashboard is used for the UI of the visualization, plotly for the interactive graph and tidyverse for the visualization and manipulation purposes.\n\n```{r message=FALSE}\nlibrary(tidyverse)\nlibrary(plotly)\nlibrary(shiny)\nlibrary(shinydashboard)\n```\n\n<br>\n\nThe dataset is read and stored in \"poverty\". Before the visualization the data is cleaned, removed the \", \" and replaced the population percentage column data with \".\" (period) and changed the data type to numeric to represent it as a floating point. Mapdata set and the poverty data is joined to plot a world map.\n\n```{r message=FALSE, results='hide'}\npoverty = read.csv(\"Poverty.csv\")\n\npoverty$X..of.population <- gsub(\",\", \".\", poverty$X..of.population)\n\nmapdata <- map_data(\"world\") %>% as_tibble()\n\npoverty <- poverty %>% rename(region = Country)\n\nmapdata <- left_join(mapdata, poverty, by=\"region\")\n\nmapdata <-mapdata %>% filter(!is.na(mapdata$Population))\n\nstr(mapdata)\n\nmapdata$X..of.population <- as.numeric(as.character(mapdata$X..of.population))\n\n```\n\n<br>\n\nPlot the data on the world map and use plotly for making it interactive\n\n```{r message=FALSE}\nmap1 <- ggplot(mapdata, aes(x = long, y = lat, group = group, text = paste(region, \": \", Total.number.of.people.living.in.extreme.poverty, \"M\"))) +\n  geom_polygon(aes(fill = X..of.population), color = \"black\") +\n  scale_fill_gradient(low = \"orange\", high = \"red\", name = \"Poverty %\") +\n  labs(title = \"Poverty Percentage by Region\") +\n  theme_minimal()\n\nmap1_plotly <- ggplotly(map1, tooltip = \"text\")\n\n```\n\n<br>\n\nUsing shiny UI is developed and connected using the server to display the map according the logic specified. If the graph type is a map then there will be a drop down displayed with the regions and single value selection type input. On the other hand if the graph type is a Bar then the input will a drop down with region names and multiple value input box. For both the graphs the data set is cleaned and filtered according to the input selection and passed to the ggplot for render the graph accordingly.\n\n```{r message=FALSE, results='hide'}\nui <- dashboardPage(\n  dashboardHeader(title = \"Poverty Data by Region\", titleWidth = 300),\n  dashboardSidebar(\n    width = 300,\n    conditionalPanel(\n      condition = \"input.graphType === 'Map'\",\n      selectInput(\"regionDropdown\", \"Select Region:\", choices = c(\"World\", unique(mapdata$region)))\n    ),\n    selectInput(\"graphType\", \"Select Graph Type:\", choices = c(\"Map\", \"Bar\")),\n    conditionalPanel(\n      condition = \"input.graphType === 'Bar'\",\n      selectizeInput(\"selectedValues\", \"Select Country(s):\", choices = unique(mapdata$region), multiple = TRUE, selected = unique(mapdata$region)[1])\n    ),\n    actionButton(\"updateButton\", \"Update View\"),\n    tags$head(tags$style(HTML('\n      .skin-blue .main-sidebar { background-color: #1f4d6e; }\n      .skin-blue .main-header .navbar { background-color: #1f4d6e; }\n      .skin-blue .main-header .logo { background-color: #1f4d6e; }\n    ')))\n  ),\n  dashboardBody(\n    fluidRow(\n      box(plotlyOutput(\"plotOutput\"), width = 12)\n    )\n  )\n)\n\nserver <- function(input, output) {\n  selected_country <- reactive({\n    if (length(input$selectedValues) == 0) {\n      unique(mapdata$region)[1]\n    } else {\n      input$selectedValues\n    }\n  })\n  output$plotOutput <- renderPlotly({\n    if (input$regionDropdown == \"World\") {\n      filteredData <- mapdata\n    } else {\n      filteredData <- mapdata[mapdata$region == input$regionDropdown, ]\n    }\n    \n    if (input$graphType == \"Map\") {\n      Map <- ggplot(filteredData, aes(x = long, y = lat, group = group, text = paste(region, \": \", Total.number.of.people.living.in.extreme.poverty))) +\n        geom_polygon(aes(fill = X..of.population), color = \"black\") +\n        scale_fill_gradient(low = \"light green\", high = \"red\", name = \"Poverty %\") +\n        labs(title = paste(\"Poverty Percentage in\", input$regionDropdown)) +\n        theme_minimal() +\n        theme(plot.title = element_text(size = 18, face = \"bold\", hjust = 0.5)) +\n        coord_fixed(1.3)\n      \n      ggplotly(Map, tooltip = \"text\")\n    } else if (input$graphType == \"Bar\") {\n     \n      povertybar <- poverty[poverty$region %in% input$selectedValues, ]\n      povertybar$Total.number.of.people.living.in.extreme.poverty <- gsub(\",\", \"\", povertybar$Total.number.of.people.living.in.extreme.poverty)\n      povertybar$Total.number.of.people.living.in.extreme.poverty <- as.numeric(povertybar$Total.number.of.people.living.in.extreme.poverty)\n  \n      Bargraph <- ggplot(povertybar, aes(x = region, y = Total.number.of.people.living.in.extreme.poverty, fill = region, text = paste(\"Population:\", Total.number.of.people.living.in.extreme.poverty, \"M\"))) +\n        geom_bar(stat = \"identity\") +\n        scale_fill_discrete(name = \"Region\") + \n        labs(title = \"Poverty Comparison among Regions\",\n             y = \"Population (M)\", x = \"Country\") +\n        theme_minimal() +\n        theme(plot.title = element_text(size = 18, face = \"bold\", hjust = 0.5))+\n        scale_y_continuous(labels = scales::comma)\n      \n      ggplotly(Bargraph, tooltip = \"text\")\n    }\n  })\n}\nshinyApp(ui, server)\n```\n\n<br>\n\n### Redesign Visualization : Line Graph\n\n<br>\n\nImport the appropriate libraries\n\n```{r message=FALSE}\nlibrary(shiny)\nlibrary(plotly)\n```\n\n<br>\n\nClean the data set by removing the parenthesis from the country column and rename the column for easier usage of attribute names (optional).\n\n```{r message=FALSE}\npoverty = read.csv(\"Poverty.csv\")\n\npoverty_year = read.csv(\"C:/Users/darsh/Desktop/STAT 515/Mid Project/Population in poverty.csv\")\n\npoverty_year$Entity <- gsub(\"\\\\(.*?\\\\)\", \"\", poverty_year$Entity)\n\npoverty_year <- poverty_year %>% rename(Country = Entity)\n\npoverty_year <- poverty_year %>% rename(Poverty.Percentage = X.2.15.a.day...Share.of.population.in.poverty)\n\n```\n\n<br>\n\nUsing Shiny, UI is developed and server renders the output according to the input value and entire UI is rendered. Line chart is displayed showing the details of the poverty percentage over the period of time.\n\n```{r results='hide'}\nui <- fluidPage(\n  titlePanel(\"Country Poverty Percentage Over Years\"),\n  selectizeInput(\"countryInput\", \"Select Country(s):\",\n                 choices = unique(poverty_year$Country),\n                 multiple = TRUE, selected = unique(poverty_year$Country)[1]),\n  plotlyOutput(\"povertyPlot\")\n)\n\nserver <- function(input, output) {\n  selected_country <- reactive({\n    if (length(input$countryInput) == 0) {\n      unique(poverty_year$Country)[1]\n    } else {\n      input$countryInput\n    }\n  })\n  \n  output$povertyPlot <- renderPlotly({\n    filtered_data <- poverty_year[poverty_year$Country %in% selected_country(), ]\n    \n    p <- ggplot(filtered_data, aes(x = Year, y = Poverty.Percentage, color = Country)) +\n      geom_line() +\n      geom_point(aes(text = paste(\"Year:\", Year, \"<br>Population in Poverty (%):\", Poverty.Percentage))) +\n      theme_minimal() +\n      labs(title = paste(\"Poverty Percentage Over Years\"),\n           y = \"Poverty Percentage\", x = \"Year\")\n    \n    ggplotly(p, tooltip = \"text\")\n  })\n}\nshinyApp(ui, server)\n```\n\nNote : Since Shiny is not supported in this static page the output is not displayed hence check the video link on the projects page for the full interactive UI demo\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"sourcecode.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"Cerulean","editor":"visual"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}